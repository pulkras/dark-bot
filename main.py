import telebot
import config 
from telebot import types
import time
from telethon import TelegramClient, events
from mysql.connector import Error

bot = telebot.TeleBot(config.TOKEN)
client = TelegramClient('daerkmem_bot', config.API_ID, config.API_HASH)

CHAT_ID = bot.get_chat("@IhtDEuLaKpZlZDky").id  # ID –≤–∞—à–µ–≥–æ —á–∞—Ç–∞
CHANNEL_ID = bot.get_chat("@darkmemtoken").id  # ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
channel_name = 'darkmemtoken'
balance = None
approved = False
global language
language = "RU"


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MySQL
def create_db_connection():
    try:
        connection = mysql.connector.connect(
            host='localhost',
            database='dark',
            user='botuser',
            password=config.PASSWORD
        )
        if connection.is_connected():
            print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return connection
    except Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –±–∞–ª–ª–æ–≤
def update_user_points(username, points):
    connection = create_db_connection()
    cursor = connection.cursor()
    try:
        cursor.execute("SELECT * FROM users WHERE username = %s", (username,))
        if cursor.fetchone() is None:
            cursor.execute("INSERT INTO users (username, points) VALUES (%s, %s)", (username, points))
        else:
            cursor.execute("UPDATE users SET points = points + %s WHERE username = %s", (points, username))
        connection.commit()
    except Error as e:
        print(f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
    finally:
        cursor.close()
        connection.close()

def is_approved(message):
    if language == "RU":
        first_markup = types.InlineKeyboardMarkup(row_width=2)
        our_news = types.InlineKeyboardButton("–ù–æ–≤–æ—Å—Ç–∏", callback_data="news", url="https://t.me/darkmemtoken")
    
        first_markup.add(our_news)
    
        second_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        wallet = types.KeyboardButton("–ö–æ—à–µ–ª–µ–∫")
        referal = types.KeyboardButton("–†–µ—Ñ.")
        lang = types.KeyboardButton("–Ø–∑—ã–∫")
        promo = types.KeyboardButton("–ü—Ä–æ–º–æ–∫–æ–¥")

        second_markup.add(wallet, referal, lang, promo)
        bot.send_message(message.chat.id, "...", reply_markup=second_markup)
        bot.send_photo(message.chat.id, open('images/dark_welcome.jpg', 'rb'), caption="–ü—Ä–∏–≤–µ—Ç!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞ $DARK! üéâ–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –º–æ–Ω–µ—Ç—ã $DARK –∑–∞ —Å–≤–æ—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –í—Å–µ –ø—Ä–æ—Å—Ç–æ: —Ä–µ–∞–≥–∏—Ä—É–π—Ç–µ –Ω–∞ –ø–æ—Å—Ç—ã –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª Dark, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è. –ß–µ–º –±–æ–ª—å—à–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ‚Äî —Ç–µ–º –±–æ–ª—å—à–µ –º–æ–Ω–µ—Ç $DARK —É –≤–∞—Å –Ω–∞ —Å—á–µ—Ç—É. üöÄ\n\n–ù–∞—á–Ω–µ–º?", parse_mode="html", reply_markup=first_markup)
    elif language == "EN":
        first_markup = types.InlineKeyboardMarkup(row_width=2)
        our_news = types.InlineKeyboardButton("News", callback_data="news", url="https://t.me/darkmemtoken")
    
        first_markup.add(our_news)
    
        second_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        wallet = types.KeyboardButton("Wallet")
        referal = types.KeyboardButton("REF")
        lang = types.KeyboardButton("LANG")
        promo = types.KeyboardButton("PromoCode")

        second_markup.add(wallet, referal, lang, promo)
        bot.send_message(message.chat.id, "...", reply_markup=second_markup)
        bot.send_photo(message.chat.id, open('images/dark_welcome.jpg', 'rb'), caption="Hi!\n\nWelcome to the official $DARK bot! üéâHere you can get $DARK coins for your activity. It's simple: react to posts and subscribe to our Dark channel to get rewards. The more activity - the more $DARK coins you have in your account. üöÄ \n\nShall we get started?", parse_mode="html", reply_markup=first_markup)

def choose_lang(message):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        russian = types.KeyboardButton("RU")
        english = types.KeyboardButton("EN")

        markup.add(russian, english)

        bot.send_message(message.chat.id, "Please specify language:", parse_mode="html", reply_markup=markup)

def subscriptions(message):
        if message.text == "RU":
            global language
            language = "RU"
            markup = types.InlineKeyboardMarkup(row_width=2)
            our_chat = types.InlineKeyboardButton("–ß–∞—Ç", callback_data="chat", url="https://t.me/+IhtDEuLaKpZlZDky")
            our_channel = types.InlineKeyboardButton("–ö–∞–Ω–∞–ª", callback_data="channel", url="https://t.me/darkmemtoken")
            approval = types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∫–∞", callback_data="approval")

            markup.add(our_chat, our_channel, approval)

            bot.send_message(message.chat.id, "–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∫ –Ω–∞–º –Ω–∞ –∫–∞–Ω–∞–ª –∏ —á–∞—Ç :)", parse_mode="html", reply_markup=markup)
        elif message.text == "EN":
            language = "EN"
            markup = types.InlineKeyboardMarkup(row_width=2)
            our_chat = types.InlineKeyboardButton("Chat", callback_data="chat", url="https://t.me/+IhtDEuLaKpZlZDky")
            our_channel = types.InlineKeyboardButton("$DARK", callback_data="channel", url="https://t.me/darkmemtoken")
            approval = types.InlineKeyboardButton("Checking", callback_data="approval")

            markup.add(our_chat, our_channel, approval)

            bot.send_message(message.chat.id, "Subscribe to our chat and channel before using bot :)", parse_mode="html", reply_markup=markup)

def wallet(message):
    if message.text == "–ö–æ—à–µ–ª–µ–∫" or message.text == "Wallet":
        balance = 20
        if language == "RU":
            first_markup = types.InlineKeyboardMarkup()
            my_nft = types.InlineKeyboardButton("–ú–æ–∏ NFT", callback_data="nft")
        
            first_markup.add(my_nft)
        
            second_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            back = types.KeyboardButton("–ù–∞–∑–∞–¥")
    
            second_markup.add(back)
            bot.send_message(message.chat.id, "...", reply_markup=second_markup)
            bot.send_photo(message.chat.id, open('images/dark_wallet.jpg', 'rb'), caption="üí∏ –í–∞—à –±–∞–ª–∞–Ω—Å:  DARK " + str(balance) + "\n\n–í–∞—à –∫–æ—à–µ–ª–µ–∫:\n\nüë®‚Äçüë®‚Äçüë¶‚Äçüë¶–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–æ–ª—å—à–µ")
        elif language == "EN":
            first_markup = types.InlineKeyboardMarkup()
            my_nft = types.InlineKeyboardButton("My NFT", callback_data="nft")
        
            first_markup.add(my_nft)
        
            second_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            back = types.KeyboardButton("Back")
    
            second_markup.add(back)
            bot.send_message(message.chat.id, "...", reply_markup=second_markup)
            bot.send_photo(message.chat.id, open('images/dark_wallet.jpg', 'rb'), caption="üí∏ Your balance: DARK " + str(balance) + "\n\nYour wallet:\n\nüë®‚Äçüë®‚Äçüë¶‚Äçüë¶Invite friends to earn more")

def enter_promocode(message):
    if message.text == "–ü—Ä–æ–º–æ–∫–æ–¥" or message.text == "PromoCode":
        if language == "RU":
            bot.send_photo(message.chat.id, open('images/dark_special_offer.jpg', 'rb'), caption="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:")
        elif language == "EN":
            bot.send_photo(message.chat.id, open('images/dark_special_offer.jpg', 'rb'), caption="Enter promo code:")

def enter_refferal(message):
    if message.text == "–†–µ—Ñ." or message.text == "REF":
        refferals = 0
        if language == "RU":
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            back = types.KeyboardButton("–ù–∞–∑–∞–¥")
    
            markup.add(back)
            bot.send_photo(message.chat.id, open('images/dark_wallet.jpg', 'rb'), caption="–í–∞—à –±–∞–ª–∞–Ω—Å:  DARK " + str(balance) + "\n\n1 —Ä–µ—Ñ. = 20 $DARK\n\n–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π üëáüèº\n\nüéñ –£ –≤–∞—Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: " + str(refferals) + " —á–µ–ª.\n\nüõé –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: https://", parse_mode="html", reply_markup=markup)
        elif language == "EN":
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            back = types.KeyboardButton("Back")
    
            markup.add(back)
            bot.send_photo(message.chat.id, open('images/dark_wallet.jpg', 'rb'), caption="Your balance: DARK " + str(balance) + "\n\n1ref. = 20 $DARK\n\nInvite more friends \n\nüéñ Your referrals: " + str(refferals) + " people.\n\nüõé Your referrer: https://", parse_mode="html", reply_markup=markup)

@bot.message_handler(commands=['start'])
def welcome(message):
    if not approved:
        choose_lang(message)

        if "IhtDEuLaKpZlZDky" in message.chat.invite_link:
            print("Chat ID:", message.chat.id)
            bot.send_message(message.chat.id, f"Chat ID: {message.chat.id}")
        else:
            bot.send_message(message.chat.id, "–≠—Ç–æ –Ω–µ —Ç–æ—Ç —á–∞—Ç.")
    else:
        is_approved(message)

@bot.message_handler(content_types=['text'])
def answer(message):
    if message.chat.type == 'private':
        subscriptions(message)
        wallet(message)
        enter_promocode(message)
        enter_refferal(message)

        if message.text == "–Ø–∑—ã–∫" or message.text == "LANG":
            choose_lang(message)

        if message.text == "–ù–∞–∑–∞–¥" or message.text == "Back":
            is_approved(message)

@bot.callback_query_handler(func=lambda call: call.data == "approval")
def check_subscription(call):
    user_id = call.from_user.id

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —á–∞—Ç
        chat_member = bot.get_chat_member(CHAT_ID, user_id)
        channel_member = bot.get_chat_member(CHANNEL_ID, user_id)

        if chat_member.status in ['—É—á–∞—Å—Ç–Ω–∏–∫', 'member', 'administrator', 'creator'] and channel_member.status in ['—É—á–∞—Å—Ç–Ω–∏–∫', 'member', 'administrator', 'creator']:
            global approved
            approved = True
            if language == "RU":
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –∏ –Ω–∞ —á–∞—Ç, –∏ –Ω–∞ –∫–∞–Ω–∞–ª
                bot.send_message(call.message.chat.id, "–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–±–∞ —Ä–µ—Å—É—Ä—Å–∞. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞.")
            elif language == "EN":
                bot.send_message(call.message.chat.id, "Checking is approved")
        else:
            if language == "RU":
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –æ–¥–∏–Ω –∏–ª–∏ –æ–±–∞ —Ä–µ—Å—É—Ä—Å–∞
                bot.send_message(call.message.chat.id, "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —á–∞—Ç –∏–ª–∏ –∫–∞–Ω–∞–ª.")
            elif language == "EN":
                bot.send_message(call.message.chat.id, "You didn't subscribe chat or channel")
        # is_approved(call.message)
    except telebot.apihelper.ApiTelegramException as e:
        print(f"–û—à–∏–±–∫–∞ API Telegram: {e}")

@bot.callback_query_handler(func=lambda call: call.data == "nft")
def check_nft_ref(call):
    if language == "RU":
       bot.send_message(call.message.chat.id, "üôÅ–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π NFT.\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π NFT –≤—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å 5+ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —á–µ—Ä–µ–∑ —Å–≤–æ—é –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.")
    elif language == "EN":
        bot.send_message(call.message.chat.id, "üôÅAt the moment you don‚Äôt have enough referrals to receive a unique NFT.\n\nTo receive a personalized NFT, you must invite 5+ referrals through your invite link.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–∏
@client.on(events.ChatAction)
async def handle_reaction(event):
    if event.chat.username == channel_name:
        if event.user_added or event.user_joined:
            user = await event.get_user()
            username = user.username or f"{user.id}"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID, –µ—Å–ª–∏ username –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å—Ç–∞–≤–∏–ª —Ä–µ–∞–∫—Ü–∏—é, –Ω–∞—á–∏—Å–ª—è–µ–º 4 –±–∞–ª–ª–∞
            if event.action_message.reactions:
                update_user_points(username, 4)
                print(f"{username} –ø–æ–ª—É—á–∏–ª {4} –±–∞–ª–ª–æ–≤ –∑–∞ —Ä–µ–∞–∫—Ü–∏—é.")

client.start()
client.run_until_disconnected()
bot.polling(none_stop=True)